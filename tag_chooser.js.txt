/* consider open Tag Chooser for Mootools 1.2
 * v0.5
 * Dedicated to public domain 
 * troy@consideropen.com
 * www.consideropen.com/blog
*/


var LiveListSearch = new Class ({
	Implements: [Options, Events],
	options: {
		inputID: '', // the id of the live search input field
		listID: '', // the id of the ul, ol or table
		choiceID: '', // the id of the element to inject the choice into
		inResultsClass: 'LLS_inresults', 
		listType: 'li', // accepts li or tr
		preventClick: true,
		reFocus: true,
		currentSelection: 'LLS_current_selection', // the class of the current selection (should i make this ID?) 
		searchTableCell: 'LLS_search_term' // class of element to search within tr, only used if listType == 'tr'
		/*onEnter: $empty*/
		/*onClick: $empty*/
		
	},
	initialize: function(options) {		
		this.setOptions(options);
		this.inputName = $(this.options.inputID);
		this.resultsWrap = $(this.options.choiceID);
		this.setOptions(options);
		if (this.options.listType == 'tr') {
			this.searchEl = $$('#' + this.options.listID + ' ' + 'tbody ' + this.options.listType);
		}
		else {
			this.searchEl = $$('#' + this.options.listID + ' ' + this.options.listType);
		}
		this.searchEl.addClass(this.options.inResultsClass);
		this.currentListItem = -1;
		this.inList = $$('.' + this.options.inResultsClass);
		this.currentTextOnClick = '';
		this.currentLiveSearch= '';
		this.searchEvents = [];
		this.listClick();
		this.searchList();
		this.currentSelection = '';
	},
	
	listClick: function(){
		if(this.options.listType != 'tr') {
			this.inList.addEvent('click', function(e) {
				if(this.options.preventClick == true){
					e.preventDefault();
				}

				e.target.getParent('.' + this.options.inResultsClass).addClass(this.options.currentSelection);
				
				var currentTagEl = e.target.getParent('.' + this.options.inResultsClass);
				this.getCurrentText(currentTagEl);
				
				this.fireEvent('click', [e, this.currentLiveSearch]);
			}.bind(this));	
		}
	},
	clearList: function(el){
		this.searchEl.removeClass(this.options.inResultsClass);	
	},
	getCurrentText: function(el){	
		this.currentLiveSearch = el.get('text');
	}, 
	
	getInputValue: function(){
		this.searchEvents.currentText = this.inputName.get('value').toLowerCase();
	},
	
	filterList: function(){
		this.getInputValue();
		this.searchEl.each(function(el){
			if (this.options.listType == 'tr') {
				this.searchEvents.currentWord = el.getElement('.' + this.options.searchTableCell).get('text').toLowerCase();
			}
			else {
				this.searchEvents.currentWord = el.get('text').toLowerCase();
			}
			
			if(this.searchEvents.currentWord.contains(this.searchEvents.currentText)) {
				
				if (this.options.listType == 'tr') {
					el.setStyle('display', 'table-row').addClass(this.options.inResultsClass);
				}
				else {
					el.setStyle('display', 'block').addClass(this.options.inResultsClass);	
				}
				
				this.inList = $$('.' + this.options.inResultsClass); 
				
			} else {
				el.setStyle('display', 'none').removeClass(this.options.inResultsClass);
				
				this.inList = $$('.' + this.options.inResultsClass);
			}
			
			this.fireEvent('filter');
		}.bind(this));	
	},
	
	searchList: function(){
		this.inputName.addEvents({
			'keyup': function(e){
				this.filterList();
				if(e.key == 'down' || e.key == 'up' || e.key == 'enter' || e.key == 'left' || e.key == 'right') {}
				else {
					this.currentListItem = -1;
					this.searchEl.removeClass(this.options.currentSelection);
				}
			}.bind(this),
			'keydown': function(e) {
				this.fireEvent('keydown', [e, this.currentLiveSearch]);
				
				if(e.key == 'down'){
					e.preventDefault();
					if(this.currentListItem == (this.inList.length-1)) {}
					else {
						this.currentListItem++;
						this.searchEl.removeClass(this.options.currentSelection);
						this.inList[this.currentListItem].addClass(this.options.currentSelection);
						this.scrollOnArrows();
					}
				}
				if(e.key == 'up'){
					e.preventDefault();
					if(this.currentListItem <= 0) {}	
					else {
						this.currentListItem--;
						this.searchEl.removeClass(this.options.currentSelection);
						this.inList[this.currentListItem].addClass(this.options.currentSelection);
						this.scrollOnArrows();
					}
				}
				if(e.key == 'enter') {
					this.cursorInList = this.inList.filter('.' + this.options.currentSelection);
					if(this.cursorInList != 0){
						e.preventDefault();
						this.getCurrentText($(this.options.listID).getElement('.' + this.options.currentSelection));
						this.fireEvent('enter', [e, this.currentLiveSearch]);
					} else {
						this.getInputValue();
						this.fireEvent('newenter', [e, this.searchEvents.currentText]);
					}
				} 
			}.bind(this)
		});
	},
	
	hightlightSelected: function(){
		$$('.' + this.options.currentSelection).highlight('#EEDC82');
		$$('.' + this.options.inResultsClass).removeClass(this.options.currentSelection);
		this.resetInput();
	},
	
	resetInput: function(){
		this.inputName.setProperty('value', '');
		
		if(this.options.reFocus == true){
			this.inputName.focus();			
		}

		this.currentListItem = -1;	
	},
	
	scrollOnArrows: function() {
		this.currentPOS = $(this.options.listID).getElement('.' + this.options.currentSelection).getPosition(this.options.listID);
		$(this.options.listID).scrollTo(0, this.currentPOS.y);
	}
});